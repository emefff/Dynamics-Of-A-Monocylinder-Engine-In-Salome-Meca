#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 27 13:22:14 2024

@author: emefff
"""

# we geerate a list of timesteps for Asterstudy, to have more control over
# the timesteps. We want to save calculation time.

import numpy as np
import matplotlib.pyplot as plt

t_start = 2e-4
t_end = 40e-3

t_step = 2e-4

num_coarse_points = int((t_end - t_start) / t_step + 1)
timesteps_coarse = np.linspace(t_start, t_end, num = num_coarse_points, endpoint=True)
# print(f"{timesteps_coarse = }\n")

# the coarse timesteps are also generated by DEFI_LIST_REEL
# if we use adaptive timesteps, the steps should be refined AFTER
# the coarse timestep like
#  |** *   *          *                        *                     |

# therefore, we generate a refined timestep list (the *), that we will SQUEEZE in between
# our coarse timesteps (the |)

# manual editing of fine timesteps_fine
num_fine_points = 8
timesteps_fine = [0, 7.8125e-7, 2.34375e-6, 5.46875e-6, 1.171875e-5,
                  2.421875e-5, 4.921875e-5, 9.921875e-5]

print(f"{timesteps_fine = }\n")
for i, fine in enumerate(timesteps_fine):
    if fine>=t_step:
        print(f"[ERROR] {i} .. A timestep_fine cannot be greater or equal to t_step! Reduce factor or change formula!")
print("")

# we squeeze these values into a new list by adding them to the members of the old
# like [timesteps_coarse[0]+timesteps_fine[0], timesteps_coarse[0]+timesteps_fine[1],... ]

timesteps_refined = []
for i, coarse in enumerate(timesteps_coarse):
    for j, fine in enumerate(timesteps_fine):
        new_time = float(coarse + fine)
        timesteps_refined.append(new_time)
timesteps_refined = timesteps_refined[:-(num_fine_points-1)] 
# we need to delete the last batch of fine_points and only leave the last coarse point, ALWAYS!

timesteps_refined.insert(0, 0) # we insert a 0 at the beginning 

head_timesteps_ref = timesteps_refined[:10]
tail_timesteps_ref = timesteps_refined[-10:]
len_timesteps_ref = len(timesteps_refined)
print(f"{head_timesteps_ref = }\n")
print(f"{tail_timesteps_ref = }\n")
print(f"{timesteps_refined = }")

# graph the values and the coarse intervals
x = [i for i in range(len_timesteps_ref)]
plt.figure(figsize=(15,9))
plt.plot(x, timesteps_refined, 'bx-')
for i_x in x:
    if  i_x%num_fine_points == 0:
        plt.plot([i_x + 1, i_x + 1], [0, max(timesteps_refined)], 'k--')
plt.show()

print("Total number of timesteps = ", len_timesteps_ref)

###############################################################################
##################### WRITE THE TIMESTEPS TO A csv FILE########################
###############################################################################
import csv

filename = 'timestep_table.csv'
with open(filename, 'w', newline='') as myfile:
      wr = csv.writer(myfile) 
      wr.writerow(timesteps_refined)



